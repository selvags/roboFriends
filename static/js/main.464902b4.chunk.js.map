{"version":3,"sources":["reducer.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/CounterButton.js","Components/Header.js","Containers/App.js","action.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialeStateRobots","isPending","robots","error","Card","_this$props","this","props","name","email","id","react_default","a","createElement","className","alt","src","concat","Component","CardList","console","log","cardsArray","map","user","Components_Card","key","SearchBox","type","aria-label","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","CounterButton","UpdateCount","count","nextProps","nextState","color","onClick","Header","Components_CounterButton","App","onRequestRobots","FilteredRobots","filter","robot","toLowerCase","includes","Components_Header","Components_SearchBox","onSearchChange","Components_Scroll","Components_ErrorBoundry","Components_CardList","connect","SearchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAOMA,EAAqB,CACvBC,YAAc,IAeZC,EAAsB,CACxBC,WAAY,EACZC,OAAS,GACTC,MAAO,+DCPIC,mLAdH,IAAAC,EACwBC,KAAKC,MAAzBC,EADJH,EACIG,KAAMC,EADVJ,EACUI,MAAOC,EADjBL,EACiBK,GACrB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,mBACrBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,YATLS,aCkBJC,mLAhBPC,QAAQC,IAAI,YADP,IAGEC,EADWhB,KAAKC,MAAfL,OACmBqB,IAAI,SAAAC,GAC3B,OAAOb,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAOF,EAAKd,GAAIA,GAAMc,EAAKd,GAAIF,KAAQgB,EAAKhB,KAAMC,MAASe,EAAKf,UAEhF,OACIE,EAAAC,EAAAC,cAAA,WAGOS,UAXGJ,aCSRS,mLAPP,OADAP,QAAQC,IAAI,aAERV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OAAOC,aAAW,gBAAgBC,YAAY,gBAAgBhB,UAAU,mCAAmCiB,SAAWzB,KAAKC,MAAMyB,uBALrId,aCWTe,mLATN,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC7D/B,KAAKC,MAAM+B,iBAJRpB,aCgCNqB,cA7BX,SAAAA,EAAYhC,GAAM,IAAAiC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnC,KAAAiC,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnC,KAAAmC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvC,KAAMC,KACDuC,MAAQ,CACTC,UAAW,GAHDP,iFAOArC,EAAO6C,GACrB1C,KAAK2C,SAAS,CAACF,UAAS,qCAIxB,OAAIzC,KAAKwC,MAAMC,SAEPpC,EAAAC,EAAAC,cAAA,0CAOAF,EAAAC,EAAAC,cAAA,WACKP,KAAKC,MAAM+B,iBAxBLpB,aC6BZgC,qBA5BX,SAAAA,IAAc,IAAAV,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnC,KAAA4C,IAEVV,EAAAC,OAAAE,EAAA,EAAAF,CAAAnC,KAAAmC,OAAAG,EAAA,EAAAH,CAAAS,GAAAL,KAAAvC,QAUJ6C,YAAc,WACVX,EAAKS,SAAS,SAAAH,GACV,MAAO,CAACM,MAAQN,EAAMM,MAAQ,MAXlCZ,EAAKM,MAAQ,CACTM,MAAQ,GAJFZ,qFAQQa,EAAWC,GAC9B,OAAO,mCAWN,OADAlC,QAAQC,IAAI,iBAERV,EAAAC,EAAAC,cAAA,UAAQ0C,MAAOjD,KAAKC,MAAMgD,MAAOC,QAASlD,KAAK6C,aAA/C,SAAmE7C,KAAKwC,MAAMM,cAvB9DlC,cCsBbuC,gMAlBWJ,EAAWC,GAC7B,OAAO,mCAKP,OADAlC,QAAQC,IAAI,WAERV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAAC6C,EAAD,CAAeH,MAAO,gBAZjBrC,aCyBfyC,8LAeMrD,KAAKC,MAAMqD,mDAGX,IAAApB,EAAAlC,KAEEuD,EAAiBvD,KAAKC,MAAML,OAAO4D,OAAO,SAAAC,GAC5C,OAAOA,EAAMvD,KAAKwD,cAAcC,SAASzB,EAAKjC,MAAMR,YAAYiE,iBAGpE,OAAO1D,KAAKC,MAAMN,UACdU,EAAAC,EAAAC,cAAA,qBAEIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAWnC,aAAc1B,KAAKC,MAAM6D,iBACpCzD,EAAAC,EAAAC,cAACwD,EAAD,KACI1D,EAAAC,EAAAC,cAACyD,EAAD,KACI3D,EAAAC,EAAAC,cAAC0D,EAAD,CAAUrE,OAAU2D,cAhC9B3C,aAuCHsD,cAzDS,SAAC1B,GAErB,MAAO,CACH/C,YAAc+C,EAAM2B,aAAa1E,YACjCG,OAAQ4C,EAAM4B,cAAcxE,OAC5BD,UAAW6C,EAAM4B,cAAczE,UAC/BE,MAAO2C,EAAM4B,cAAcvE,QAIR,SAACwE,GAExB,MAAO,CACHP,eAAiB,SAACQ,GAAD,OAAWD,ECrBK,CACrC/C,KCH6B,sBDI7BiD,QDmBwDD,EAAME,OAAOC,SACjEnB,gBAAkB,kBAAMe,ECjBG,SAACA,GAChCA,EAAS,CAAC/C,KCPsB,2BDQhCoD,MAAM,8CAA8CC,KAAK,SAAAC,GACrD,OAAOA,EAASC,SACjBF,KAAK,SAAAG,GACLT,EAAS,CACL/C,KCXyB,yBDYzBiD,QAASO,MAEbC,MAAM,SAAAlF,GACLwE,EAAS,CACL/C,KCfwB,yBDgBxBiD,QAAS1E,WDgDNqE,CAA6Cb,SGvDxC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAAMC,EAASC,yBAETC,EAAcC,YAAgB,CAACrB,aZHT,WAA4C,IAA3C3B,EAA2CiD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnCjG,EAAmBoG,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAE7D,OAAOG,EAAOtE,MAEV,IUfyB,sBVgBrB,OAAOa,OAAA0D,EAAA,EAAA1D,CAAA,GAAIK,EAAX,CAAkB/C,YAAYmG,EAAOrB,UAEzC,QACI,OAAO/B,IYLgC4B,cZetB,WAA8C,IAA7C5B,EAA6CiD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAArC/F,EAAqBkG,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAEhE,OAAOG,EAAOtE,MAEV,IUhC4B,yBViCxB,OAAOa,OAAO2D,OAAQ,GAAItD,EAAO,CAAC7C,WAAU,IAEhD,IUlC4B,yBVmCxB,OAAOwC,OAAO2D,OAAQ,GAAItD,EAAO,CAAC5C,OAAOgG,EAAOrB,SAAU,CAAC5E,WAAU,IAEzE,IUpC4B,yBVqCxB,OAAOwC,OAAO2D,OAAQ,GAAItD,EAAO,CAAC3C,MAAM+F,EAAOrB,QAAS5E,WAAU,IAEtE,QACI,OAAO6C,MY5BbuD,EAAQC,YAAYT,EAAaU,YAAgBC,IAAiBb,IAExEc,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,CAAUN,MAASA,GAAO1F,EAAAC,EAAAC,cAAC+F,EAAD,OAAoBC,SAASC,eAAe,SDgHhF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.464902b4.chunk.js","sourcesContent":["import {\n    ChangeSearchField,\n    RequestRobotsFailure,\n    RequestRobotsSuccess,\n    RequestRobotsPending\n} from './constants';\n\nconst initialStateSearch = {\n    searchField : ''\n}\n\nexport const SearchRobots = (state = initialStateSearch,action = {}) => {\n\n    switch(action.type){\n\n        case ChangeSearchField:\n            return {...state, searchField:action.payload};  //return Object.assign({}, state, {searchField:action.payload}) --- we can use this also\n\n        default:\n            return state;\n    }\n}\n\nconst initialeStateRobots = {\n    isPending : false,\n    robots : [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialeStateRobots, action = {}) => {\n\n    switch(action.type){\n\n        case RequestRobotsPending:\n            return Object.assign( {}, state, {isPending:true});\n\n        case RequestRobotsSuccess:\n            return Object.assign( {}, state, {robots:action.payload}, {isPending:false});\n\n        case RequestRobotsFailure:\n            return Object.assign( {}, state, {error:action.payload, isPending:false});\n\n        default:\n            return state;\n    }\n}","import React, {Component} from 'react';\n\n\nclass Card extends Component{\n    \n    render(){\n        const { name, email, id } = this.props;\n        return(\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}></img>\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;","import React, {Component} from 'react';\nimport Card from './Card';\n\nclass CardList extends Component{\n     render(){\n        console.log('CardList');\n         const {robots} = this.props;\n         const cardsArray = robots.map(user => {\n            return <Card key = {user.id} id = {user.id} name = {user.name} email = {user.email}/>\n         });\n         return(\n             <div>\n                {\n                    //we can user map function directly into this also without having a constant.\n                    cardsArray\n                } \n             </div>\n         )\n     }\n}\n\nexport default CardList;","import React, {Component} from 'react';\n\nclass SearchBox extends Component{\n    render(){\n        console.log('SearchBox');\n        return(\n            <div className='pa2'>\n                <input type='text' aria-label='search robots' placeholder='Search Robots' className='pa3 ba b--green bg-lightest-blue' onChange ={this.props.searchChange} />\n            </div>\n        )\n    }\n}\nexport default SearchBox; ","import React, {Component} from 'react';\n\nclass Scroll extends Component{\n     render(){\n         return(\n             <div style={{overflowY:'scroll', border:'1px solid black', height:'800px'}}>\n                 {this.props.children}\n             </div>\n             \n         )\n     }\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\n\nclass ErrorBoundry extends Component{\n    \n    constructor(props){\n        super(props);\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError:true});\n    }\n\n    render(){\n        if (this.state.hasError) {\n            return(\n                <h1>\n                    Ooooopssss This is not Good!\n                </h1>\n            )\n        }\n        else{\n            return(\n                <div>\n                    {this.props.children}\n                </div>\n            )\n        }\n    }\n}\n\nexport default ErrorBoundry;","import React,{Component} from 'react';\n\nclass CounterButton extends Component {\n    \n    constructor() {\n\n        super();\n        this.state = {\n            count : 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState){\n       return true; \n    }\n\n    UpdateCount = () => {\n        this.setState(state => {\n            return {count : state.count + 1}\n        });\n    }\n\n    render(){\n        console.log('CounterButton');    \n        return(\n            <button color={this.props.color} onClick={this.UpdateCount}>Count:{this.state.count}</button>\n        )\n\n    }\n\n}\n\nexport default CounterButton;","import React,{Component} from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    \n\n    shouldComponentUpdate(nextProps, nextState){\n        return false;\n    }\n\n    render(){\n        console.log('Headers');    \n        return(\n            <div>\n                <h1 className='f1'>Robo Friends</h1>\n                <CounterButton color={'red'}></CounterButton>\n            </div>\n            \n        )\n\n    }\n\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport {setSearchField, requestRobots} from '../action';\nimport {connect} from 'react-redux';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\nimport './App.css';\nimport Header from '../Components/Header';\n\nconst mapStateToProps = (state) => {\n    \n    return {\n        searchField : state.SearchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    \n    return {\n        onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots : () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component{\n\n    // constructor(){\n    //     super(); \n    //     this.state = {\n    //         robots:[]\n    //     }\n    // }\n\n    componentDidMount(){\n    //     fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n    //         return response.json();\n    //     }).then(users => {\n    //         this.setState({robots:users});\n    //     })\n            this.props.onRequestRobots();\n    }\n\n    render(){\n\n        const FilteredRobots = this.props.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n        });\n\n        return this.props.isPending ?\n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <Header></Header>\n                    <SearchBox searchChange={this.props.onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots = {FilteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {ChangeSearchField, RequestRobotsFailure, RequestRobotsPending, RequestRobotsSuccess} from './constants';\n\nexport const setSearchField = (text) => ({\n    type : ChangeSearchField,\n    payload : text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type:RequestRobotsPending});\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n        return response.json();\n    }).then(data => {\n       dispatch({\n           type: RequestRobotsSuccess,\n           payload: data\n       }) \n    }).catch(error => {\n        dispatch({\n            type: RequestRobotsFailure,\n            payload: error\n        })\n    })\n}","export const ChangeSearchField = 'CHANGE_SEARCH_Field';\nexport const RequestRobotsPending = 'REQUEST_ROBOTS_PENDING';\nexport const RequestRobotsSuccess = 'REQUEST_ROBOTS_SUCCESS';\nexport const RequestRobotsFailure = 'REQUEST_ROBOTS_FAILURE';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {SearchRobots, requestRobots} from './reducer';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App'; \nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({SearchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store = {store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}